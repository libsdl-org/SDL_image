set(SDL2_IMAGE_SUPPORT_BMP   @SUPPORT_BMP@)
set(SDL2_IMAGE_SUPPORT_GIF   @SUPPORT_GIF@)
set(SDL2_IMAGE_SUPPORT_JPG   @SUPPORT_JPG@)
set(SDL2_IMAGE_SUPPORT_JXL   @SUPPORT_JXL@)
set(SDL2_IMAGE_SUPPORT_LBM   @SUPPORT_LBM@)
set(SDL2_IMAGE_SUPPORT_PCX   @SUPPORT_PCX@)
set(SDL2_IMAGE_SUPPORT_PNG   @SUPPORT_PNG@)
set(SDL2_IMAGE_SUPPORT_PNM   @SUPPORT_PNM@)
set(SDL2_IMAGE_SUPPORT_QOI   @SUPPORT_QOI@)
set(SDL2_IMAGE_SUPPORT_STB   @SUPPORT_STB@)
set(SDL2_IMAGE_SUPPORT_SVG   @SUPPORT_SVG@)
set(SDL2_IMAGE_SUPPORT_TGA   @SUPPORT_TGA@)
set(SDL2_IMAGE_SUPPORT_TIF   @SUPPORT_TIF@)
set(SDL2_IMAGE_SUPPORT_XCF   @SUPPORT_XCF@)
set(SDL2_IMAGE_SUPPORT_XPM   @SUPPORT_XPM@)
set(SDL2_IMAGE_SUPPORT_XV    @SUPPORT_XV@)
set(SDL2_IMAGE_SUPPORT_WEBP  @SUPPORT_WEBP@)

include(CMakeFindDependencyMacro)

if (NOT ANDROID AND NOT (TARGET SDL2::SDL2 OR TARGET SDL2::SDL2-static))
	find_dependency(SDL2 REQUIRED)
endif()

if(SDL2_IMAGE_SUPPORT_JPG AND NOT @SUPPORT_JPG_VENDORED@)
	find_dependency(JPEG REQUIRED)
endif()

if(SDL2_IMAGE_SUPPORT_JXL AND NOT @SUPPORT_JXL_VENDORED@)
	find_library(LIBJXL_LIBRARY NAMES jxl)
	if (NOT LIBJXL_LIBRARY)
		message(FATAL_ERROR "Could not find jxl library")
	endif()
	find_path(LIBJXL_INCLUDE NAMES jxl/decode.h)
	if (NOT LIBJXL_INCLUDE)
		message(FATAL_ERROR "Could not find jxl include directory")
	endif()
	add_library(jxl UNKNOWN IMPORTED)
endif()

if(SDL2_IMAGE_SUPPORT_PNG AND NOT @SUPPORT_PNG_VENDORED@)
	if(NOT @SUPPORT_ZLIB_VENDORED@)
		find_package(ZLIB REQUIRED)
	endif()
	find_package(PNG REQUIRED)
endif()

if(SDL2_IMAGE_SUPPORT_TIF AND NOT @SUPPORT_TIF_VENDORED@)
	find_package(TIFF REQUIRED)
endif()

if(SDL2_IMAGE_SUPPORT_WEBP AND NOT @SUPPORT_WEBP_VENDORED@)
	if (NOT TARGET WebP::webp)
		find_library(WEBP_LIBRARY NAMES webp)
		if (NOT WEBP_LIBRARY)
			message(FATAL_ERROR "Could not find webp library")
		endif()
		find_path(WEBP_INCLUDE NAMES webp/decode.h)
		if (NOT WEBP_INCLUDE)
			message(FATAL_ERROR "Could not find webp include directory")
		endif()
		add_library(webp UNKNOWN IMPORTED)
		set_target_properties(webp PROPERTIES
			IMPORTED_LOCATION "${WEBP_LIBRARY}"
			INTERFACE_INCLUDE_DIRECTORIES "${WEBP_INCLUDE}"
			)
		list(APPEND PC_REQUIRES libwebp)
		add_library(WebP::webp ALIAS webp)
	endif()
endif()

if (EXISTS "${CMAKE_CURRENT_LIST_DIR}/SDL2_image-shared-targets.cmake")
	include("${CMAKE_CURRENT_LIST_DIR}/SDL2_image-shared-targets.cmake")
endif()

if (EXISTS "${CMAKE_CURRENT_LIST_DIR}/SDL2_image-static-targets.cmake")
	include("${CMAKE_CURRENT_LIST_DIR}/SDL2_image-static-targets.cmake")
endif()
