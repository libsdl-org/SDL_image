name: Build

on: [push, pull_request]

jobs:
  Build:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    defaults:
      run:
        shell: ${{ matrix.platform.shell }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Windows (mingw32),      os: windows-latest, shell: 'msys2 {0}', msystem: mingw32, msys-env: mingw-w64-i686 }
        - { name: Windows (mingw64),      os: windows-latest, shell: 'msys2 {0}', msystem: mingw64, msys-env: mingw-w64-x86_64 }
        - { name: Linux (CMake),          os: ubuntu-20.04,   shell: sh,   cmake: '-GNinja' }
        - { name: Linux (CMake static),   os: ubuntu-20.04,   shell: sh,   cmake: '-GNinja -DBUILD_SHARED_LIBS=OFF' }
        - { name: Linux (autotools),      os: ubuntu-20.04,   shell: sh }

    steps:
    - name: Set up MSYS2
      if: matrix.platform.shell == 'msys2 {0}'
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.platform.msystem }}
        install: >-
          ${{ matrix.platform.msys-env }}-SDL2
          ${{ matrix.platform.msys-env }}-autotools
          ${{ matrix.platform.msys-env }}-cmake
          ${{ matrix.platform.msys-env }}-gcc
          ${{ matrix.platform.msys-env }}-libjpeg-turbo
          ${{ matrix.platform.msys-env }}-libpng
          ${{ matrix.platform.msys-env }}-libtiff
          ${{ matrix.platform.msys-env }}-libwebp
          ${{ matrix.platform.msys-env }}-ninja
          ${{ matrix.platform.msys-env }}-pkg-config
          ${{ matrix.platform.msys-env }}-zlib

    - name: Setup Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get -y install \
          autoconf \
          automake \
          cmake \
          gnome-desktop-testing \
          libjpeg-dev \
          libpng-dev \
          libsdl2-dev \
          libtiff-dev \
          libtool \
          libwebp-dev \
          ninja-build \
          pkg-config \
          zlib1g-dev \
          ${NULL+}
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Check that versioning is consistent
      # We only need to run this once: arbitrarily use the Linux/CMake build
      if: "runner.os == 'Linux' && matrix.platform.cmake"
      run: ./test-versioning.sh

    - name: Configure CMake
      if: "matrix.platform.cmake"
      run: |
        cmake -B build \
          -DBUILD_SAMPLES=ON \
          -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
          -DCMAKE_VERBOSE_MAKEFILE=ON \
          -DSUPPORT_JXL=OFF \
          -DSUPPORT_TIF=ON \
          -DSUPPORT_WEBP=ON \
          ${{ matrix.platform.cmake }}
    - name: Build
      if: "matrix.platform.cmake"
      run: cmake --build build/ --config Release
    - name: Install
      if: "matrix.platform.shell == 'sh' && matrix.platform.cmake"
      run: |
        set -eu
        rm -fr DESTDIR-cmake
        DESTDIR=$(pwd)/DESTDIR-cmake cmake --install build/ --config Release
        ( cd DESTDIR-cmake; find ) | LC_ALL=C sort -u

    - name: Configure Autotools
      if: "! matrix.platform.cmake"
      run: |
        set -eu
        rm -fr build-autotools
        mkdir build-autotools
        ./autogen.sh
        # We do the CMake build with stb_image and the Autotools build without
        set -- --disable-stb-image
        # mingw-w64-*-SDL2 doesn't have SDL_test, so only build this on Unix
        if [ "${{ matrix.platform.shell }}" = 'sh' ]; then
          set -- "$@" --enable-tests
          set -- "$@" --enable-installed-tests
        fi
        ( cd build-autotools && ../configure "$@" )
    - name: Build with Autotools
      if: "! matrix.platform.cmake"
      run: |
        set -eu
        parallel="$(getconf _NPROCESSORS_ONLN)"
        make -j"${parallel}" -C build-autotools V=1
    - name: Run tests with Autotools
      if: "! matrix.platform.cmake"
      run: |
        set -eu
        parallel="$(getconf _NPROCESSORS_ONLN)"

        export SDL_IMAGE_TEST_REQUIRE_LOAD_AVIF=0
        export SDL_IMAGE_TEST_REQUIRE_LOAD_BMP=1
        export SDL_IMAGE_TEST_REQUIRE_LOAD_CUR=1
        export SDL_IMAGE_TEST_REQUIRE_LOAD_GIF=1
        export SDL_IMAGE_TEST_REQUIRE_LOAD_ICO=1
        export SDL_IMAGE_TEST_REQUIRE_LOAD_JPG=1
        export SDL_IMAGE_TEST_REQUIRE_LOAD_JXL=0
        export SDL_IMAGE_TEST_REQUIRE_LOAD_LBM=1
        export SDL_IMAGE_TEST_REQUIRE_LOAD_PCX=1
        export SDL_IMAGE_TEST_REQUIRE_LOAD_PNG=1
        export SDL_IMAGE_TEST_REQUIRE_LOAD_PNM=1
        export SDL_IMAGE_TEST_REQUIRE_LOAD_QOI=1
        export SDL_IMAGE_TEST_REQUIRE_LOAD_SVG=1
        export SDL_IMAGE_TEST_REQUIRE_LOAD_TGA=1
        export SDL_IMAGE_TEST_REQUIRE_LOAD_TIF=1
        export SDL_IMAGE_TEST_REQUIRE_LOAD_WEBP=1
        export SDL_IMAGE_TEST_REQUIRE_LOAD_XPM=1
        export SDL_IMAGE_TEST_REQUIRE_LOAD_XV=1

        export SDL_IMAGE_TEST_REQUIRE_SAVE_JPG=1
        export SDL_IMAGE_TEST_REQUIRE_SAVE_PNG=1

        make -j"${parallel}" -C build-autotools check V=1 VERBOSE=1
    - name: Install with Autotools
      if: "! matrix.platform.cmake"
      run: |
        set -eu
        curdir="$(pwd)"
        parallel="$(getconf _NPROCESSORS_ONLN)"
        rm -fr DESTDIR-autotools
        mkdir DESTDIR-autotools
        make -j"${parallel}" -C build-autotools install DESTDIR="${curdir}/DESTDIR-autotools" V=1
        ( cd DESTDIR-autotools; find ) | LC_ALL=C sort -u
    - name: Distcheck with Autotools
      if: "runner.os == 'Linux' && ! matrix.platform.cmake"
      run: |
        set -eu
        parallel="$(getconf _NPROCESSORS_ONLN)"
        make -j"${parallel}" -C build-autotools distcheck V=1
    - name: Upload artifacts
      if: "failure() && runner.os == 'Linux' && ! matrix.platform.cmake"
      uses: actions/upload-artifact@v3
      with:
        name: Autotools artifacts
        path: |
          build-autotools/test/*.bmp
          build-autotools/test/*.jpg
          build-autotools/test/*.log
          build-autotools/test/*.png
        if-no-files-found: ignore
